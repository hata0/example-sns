/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  CreatePostsBody,
  DeletePostsId401,
  DeletePostsId404,
  DeletePostsId500,
  ErrorResponse,
  GetPosts401,
  GetPosts404,
  GetPosts500,
  GetPostsId401,
  GetPostsId404,
  GetPostsId500,
  GetPostsParams,
  GetPostsResponse,
  ListPostsResponse,
  PostPosts401,
  PostPosts404,
  PostPosts500,
  PutPostsId401,
  PutPostsId404,
  PutPostsId500,
  SuccessResponse,
  UpdatePostBody
} from '.././model';

import { fetcher } from '../../../utils/api';




export const getGetPostsIdUrl = (id: string,) => {


  

  return `/posts/${id}`
}

export const getPostsId = async (id: string, options?: RequestInit): Promise<GetPostsResponse> => {
  
  return fetcher<GetPostsResponse>(getGetPostsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetPostsIdQueryKey = (id: string,) => {
    return [`/posts/${id}`] as const;
    }

    
export const getGetPostsIdQueryOptions = <TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsId>>> = () => getPostsId(id, );

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPostsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsId>>>
export type GetPostsIdQueryError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500


export function useGetPostsId<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          Awaited<ReturnType<typeof getPostsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsId<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPostsId>>,
          TError,
          Awaited<ReturnType<typeof getPostsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsId<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPostsId<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPostsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPostsIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostsId>>> = () => getPostsId(id, );

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPostsIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getPostsId>>>
export type GetPostsIdSuspenseQueryError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500


export function useGetPostsIdSuspense<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsIdSuspense<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsIdSuspense<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPostsIdSuspense<TData = Awaited<ReturnType<typeof getPostsId>>, TError = ErrorResponse | GetPostsId401 | GetPostsId404 | GetPostsId500>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPostsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPostsIdSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPutPostsIdUrl = (id: string,) => {


  

  return `/posts/${id}`
}

export const putPostsId = async (id: string,
    updatePostBody: UpdatePostBody, options?: RequestInit): Promise<SuccessResponse> => {
  
  return fetcher<SuccessResponse>(getPutPostsIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updatePostBody,)
  }
);}




export const getPutPostsIdMutationOptions = <TError = ErrorResponse | PutPostsId401 | PutPostsId404 | PutPostsId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPostsId>>, TError,{id: string;data: UpdatePostBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putPostsId>>, TError,{id: string;data: UpdatePostBody}, TContext> => {

const mutationKey = ['putPostsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPostsId>>, {id: string;data: UpdatePostBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putPostsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutPostsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putPostsId>>>
    export type PutPostsIdMutationBody = UpdatePostBody
    export type PutPostsIdMutationError = ErrorResponse | PutPostsId401 | PutPostsId404 | PutPostsId500

    export const usePutPostsId = <TError = ErrorResponse | PutPostsId401 | PutPostsId404 | PutPostsId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPostsId>>, TError,{id: string;data: UpdatePostBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putPostsId>>,
        TError,
        {id: string;data: UpdatePostBody},
        TContext
      > => {

      const mutationOptions = getPutPostsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getDeletePostsIdUrl = (id: string,) => {


  

  return `/posts/${id}`
}

export const deletePostsId = async (id: string, options?: RequestInit): Promise<SuccessResponse> => {
  
  return fetcher<SuccessResponse>(getDeletePostsIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeletePostsIdMutationOptions = <TError = ErrorResponse | DeletePostsId401 | DeletePostsId404 | DeletePostsId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePostsId>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deletePostsId>>, TError,{id: string}, TContext> => {

const mutationKey = ['deletePostsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePostsId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deletePostsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePostsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deletePostsId>>>
    
    export type DeletePostsIdMutationError = ErrorResponse | DeletePostsId401 | DeletePostsId404 | DeletePostsId500

    export const useDeletePostsId = <TError = ErrorResponse | DeletePostsId401 | DeletePostsId404 | DeletePostsId500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePostsId>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletePostsId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeletePostsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getGetPostsUrl = (params: GetPostsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/posts?${stringifiedParams}` : `/posts`
}

export const getPosts = async (params: GetPostsParams, options?: RequestInit): Promise<ListPostsResponse> => {
  
  return fetcher<ListPostsResponse>(getGetPostsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetPostsQueryKey = (params: GetPostsParams,) => {
    return [`/posts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(params: GetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = () => getPosts(params, );

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500


export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(
 params: GetPostsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(
 params: GetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(
 params: GetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(
 params: GetPostsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPostsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPostsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(params: GetPostsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = () => getPosts(params, );

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPostsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsSuspenseQueryError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500


export function useGetPostsSuspense<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(
 params: GetPostsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsSuspense<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(
 params: GetPostsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPostsSuspense<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(
 params: GetPostsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetPostsSuspense<TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorResponse | GetPosts401 | GetPosts404 | GetPosts500>(
 params: GetPostsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPostsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getPostPostsUrl = () => {


  

  return `/posts`
}

export const postPosts = async (createPostsBody: CreatePostsBody, options?: RequestInit): Promise<SuccessResponse> => {
  
  return fetcher<SuccessResponse>(getPostPostsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createPostsBody,)
  }
);}




export const getPostPostsMutationOptions = <TError = ErrorResponse | PostPosts401 | PostPosts404 | PostPosts500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: CreatePostsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: CreatePostsBody}, TContext> => {

const mutationKey = ['postPosts'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPosts>>, {data: CreatePostsBody}> = (props) => {
          const {data} = props ?? {};

          return  postPosts(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPostsMutationResult = NonNullable<Awaited<ReturnType<typeof postPosts>>>
    export type PostPostsMutationBody = CreatePostsBody
    export type PostPostsMutationError = ErrorResponse | PostPosts401 | PostPosts404 | PostPosts500

    export const usePostPosts = <TError = ErrorResponse | PostPosts401 | PostPosts404 | PostPosts500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPosts>>, TError,{data: CreatePostsBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postPosts>>,
        TError,
        {data: CreatePostsBody},
        TContext
      > => {

      const mutationOptions = getPostPostsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    