/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  GetPostsResponse,
  ListPostsResponse,
  SuccessResponse
} from '.././model';


export const getGetPostsIdResponseMock = (overrideResponse: Partial< GetPostsResponse > = {}): GetPostsResponse => ({post: {id: faker.string.uuid(), content: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getPutPostsIdResponseMock = (overrideResponse: Partial< SuccessResponse > = {}): SuccessResponse => ({message: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getDeletePostsIdResponseMock = (overrideResponse: Partial< SuccessResponse > = {}): SuccessResponse => ({message: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})

export const getGetPostsResponseMock = (overrideResponse: Partial< ListPostsResponse > = {}): ListPostsResponse => ({posts: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.uuid(), content: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), ...overrideResponse})

export const getPostPostsResponseMock = (overrideResponse: Partial< SuccessResponse > = {}): SuccessResponse => ({message: faker.helpers.arrayElement(['success'] as const), ...overrideResponse})


export const getGetPostsIdMockHandler = (overrideResponse?: GetPostsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetPostsResponse> | GetPostsResponse)) => {
  return http.get('*/posts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPostsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutPostsIdMockHandler = (overrideResponse?: SuccessResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<SuccessResponse> | SuccessResponse)) => {
  return http.put('*/posts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutPostsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeletePostsIdMockHandler = (overrideResponse?: SuccessResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<SuccessResponse> | SuccessResponse)) => {
  return http.delete('*/posts/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeletePostsIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPostsMockHandler = (overrideResponse?: ListPostsResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ListPostsResponse> | ListPostsResponse)) => {
  return http.get('*/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostPostsMockHandler = (overrideResponse?: SuccessResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SuccessResponse> | SuccessResponse)) => {
  return http.post('*/posts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostPostsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getPostsMock = () => [
  getGetPostsIdMockHandler(),
  getPutPostsIdMockHandler(),
  getDeletePostsIdMockHandler(),
  getGetPostsMockHandler(),
  getPostPostsMockHandler()
]
